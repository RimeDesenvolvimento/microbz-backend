// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}


model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String

}


enum CustomerStatus {
  ACTIVE
  INACTIVE
}
model Customer {
  id Int @id @default(autoincrement())
  name String
  taxId String? @unique 
  status CustomerStatus @default(ACTIVE)
  createdAt DateTime @default(now())

  sales Sale[]
  companyBranchId Int
  companyBranch CompanyBranch @relation(fields: [companyBranchId], references: [id], onDelete: Cascade)
  importedSpreadsheetId Int
  importedSpreadsheet ImportedSpreadsheet @relation(fields: [importedSpreadsheetId], references: [id], onDelete: Cascade)

  @@map("customer")

}


enum SaleType {
  SERVICE
  PRODUCT
}

enum SaleStatus {
  COMPLETED
  CANCELLED
}

model ImportedSpreadsheet {
  id Int @id @default(autoincrement())
  fileName String

  
  createdAt DateTime @default(now())

  companyId Int
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customers Customer[]
  sales Sale[]
  companyBranches CompanyBranch[]
}

model Sale {
  id Int @id @default(autoincrement())
  saleDate DateTime
  code String 
  description String
  quantity Int
  unitValue Decimal @db.Decimal(10, 2)
  totalValue Decimal @db.Decimal(10, 2)
  customerId Int
  registrationDate DateTime @default(now())
  type SaleType
  status SaleStatus 

  customer Customer @relation(fields: [customerId], references: [id])
  companyBranchId Int
  companyBranch CompanyBranch @relation(fields: [companyBranchId], references: [id], onDelete: Cascade)
  importedSpreadsheetId Int
  importedSpreadsheet ImportedSpreadsheet @relation(fields: [importedSpreadsheetId], references: [id], onDelete: Cascade)

  @@map("sale")
}


model Company {
  id Int @id @default(autoincrement())
  name String
 
  createdAt DateTime @default(now())
  companyBranches CompanyBranch[]
  importedSpreadsheets ImportedSpreadsheet[]
  @@map("company")
}

model CompanyBranch {
  id Int @id @default(autoincrement())
  name String
  companyId Int
  code String? 

  company Company @relation(fields: [companyId], references: [id])
  sales Sale[]
  customers Customer[]
  goals Goal[] 
  createdAt DateTime @default(now())

  importedSpreadsheetId Int
  importedSpreadsheet ImportedSpreadsheet @relation(fields: [importedSpreadsheetId], references: [id], onDelete: Cascade)

  @@unique([name, companyId])
  @@unique([code, companyId])
  @@map("company_branch")
}

model Goal {
  id Int @id @default(autoincrement())
  
 
  companyBranchId Int
  companyBranch CompanyBranch @relation(fields: [companyBranchId], references: [id], onDelete: Cascade)

  month Int
  year Int
  
 
  
  productRevenue Decimal @db.Decimal(12, 2) @default(0)
  serviceRevenue Decimal @db.Decimal(12, 2) @default(0)
  ticketAverage Decimal @db.Decimal(12, 2) @default(0)
  
 
  customers Int @default(0)
  newCustomers Int @default(0)
  productsPerClient Decimal @db.Decimal(8, 2) @default(0)
  servicesPerClient Decimal @db.Decimal(8, 2) @default(0)
  
  
  marketing Decimal @db.Decimal(12, 2) @default(0)
  leadsGenerated Int @default(0)
  leadsMeetings Int @default(0)
  marketingSales Int @default(0)
  cpl Decimal @db.Decimal(10, 2) @default(0)
  leadToMeetingRate Decimal @db.Decimal(5, 2) @default(0) 
  meetingToSaleRate Decimal @db.Decimal(5, 2) @default(0) 
  roas Decimal @db.Decimal(8, 2) @default(0)

  redFlagPercentage Decimal @db.Decimal(5, 2) @default(0)
  yellowFlagPercentage Decimal @db.Decimal(5, 2) @default(0)
  greenFlagPercentage Decimal @db.Decimal(5, 2) @default(0)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  
  @@unique([companyBranchId, month, year])
  @@map("goal")
}